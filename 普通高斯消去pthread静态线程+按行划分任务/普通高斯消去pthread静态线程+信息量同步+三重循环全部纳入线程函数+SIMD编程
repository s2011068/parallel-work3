#include <iostream>
#include<sys/time.h>
#include<arm_neon.h>
#include<pthread.h>
#include <semaphore.h>
using namespace std;
#define NUM_THREADS 8
const int N=4000;
float m[N][N];
void m_reset()
 {
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<i;j++)
            m[i][j]=0;
        m[i][i]=1.0;
        for(int j=i+1;j<N;j++)
            m[i][j]=rand()%1000+1;
    }
    for(int k=0;k<N;k++)
        for(int i=k+1;i<N;i++)
            for(int j=0;j<N;j++)
                m[i][j]+=m[k][j];
}
typedef struct{
    int t_id;
}threadParam_t;

sem_t sem_leader;
sem_t sem_Divsion[NUM_THREADS-1];
sem_t sem_Elimination[NUM_THREADS-1];

void *threadFunc(void *param)
{
    threadParam_t *p=(threadParam_t*)param;
    int t_id=p->t_id;
    int i,j;
    for(int k=0;k<N;++k)
    {
        if(t_id==0)
        {
            float32x4_t vt=vmovq_n_f32(m[k][k]);
                for( j=k+1;j+4<N;j+=4)
                {
                        float32x4_t va=vld1q_f32(&m[k][j]);
                        va=vdivq_f32(va,vt);
                        vst1q_f32(&m[k][j],va);
                }
                for(;j<N;j++)
                {
    			m[k][j]=m[k][j]/m[k][k];
                }
                m[k][k]=1.0;

        }
        else
        {
            sem_wait(&sem_Divsion[t_id-1]);
        }
        if(t_id==0)
        {
            for(int t_id=0;t_id<NUM_THREADS-1;t_id++)
            {
                sem_post(&sem_Divsion[t_id]);
            }
        }
        for(int i=k+1+t_id;i<N;i+=NUM_THREADS)
                {
                        float32x4_t vaik=vmovq_n_f32(m[i][k]);
                        for(j=k+1;j+4<N;j+=4)
                        {
                                float32x4_t vakj=vld1q_f32(&m[k][j]);
                                float32x4_t vaij=vld1q_f32(&m[i][j]);
                                float32x4_t vx=vmulq_f32(vakj,vaik);
                                vaij=vsubq_f32(vaij,vx);
                                vst1q_f32(&m[i][j],vaij);
			}
                        for(;j<N;j++)
                        {
                                m[i][j]=m[i][j]-m[k][j]*m[i][k];
                        }
                        m[i][k]=0;
                }

        if(t_id==0)
        {
            for(int t_id=0;t_id<NUM_THREADS-1;t_id++)
            {
                sem_wait(&sem_leader);
            }
            for(int t_id=0;t_id<NUM_THREADS-1;t_id++)
            {
                sem_post(&sem_Elimination[t_id]);
            }
        }
        else
        {
            sem_post(&sem_leader);
            sem_wait(&sem_Elimination[t_id-1]);
        }
    }
    pthread_exit(NULL);
}
int main()
{
	m_reset();

        struct  timeval   tv_begin,tv_end;
        unsigned  long s_pthread_simd_time;

        gettimeofday(&tv_begin,NULL);
	sem_init(&sem_leader, 0, 0);
        for(int i=0;i<NUM_THREADS-1;i++)
        {
            sem_init(&sem_Divsion[i],0,0);
            sem_init(&sem_Elimination[i],0,0);
        }

        pthread_t handles[NUM_THREADS];
        threadParam_t param[NUM_THREADS];
        for(int id =0;id<NUM_THREADS;id++)
        {
            param[id].t_id=id;
            pthread_create(&handles[id],NULL,threadFunc,(void*)&param[id]);
        }

        for(int t_id=0;t_id<NUM_THREADS;t_id++)
        {
            pthread_join(handles[t_id],NULL);
        }
        sem_destroy(&sem_leader);
        for(int i=0;i<NUM_THREADS-1;i++)
        {
            sem_destroy(&sem_Divsion[i]);
            sem_destroy(&sem_Elimination[i]);
        }



        gettimeofday(&tv_end,NULL);
        s_pthread_simd_time=1000000 * (tv_end.tv_sec-tv_begin.tv_sec)+ tv_end.tv_usec-tv_begin.tv_usec;
        cout<<"s_pthread_simd_time:"<<s_pthread_simd_time<<endl;
}
