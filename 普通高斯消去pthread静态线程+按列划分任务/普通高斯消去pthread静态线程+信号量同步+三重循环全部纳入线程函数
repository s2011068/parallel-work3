#include <iostream>
#include<sys/time.h>
#include<pthread.h>
#include <semaphore.h>
using namespace std;
#define NUM_THREADS 8
const int N=10;
float m[N][N];
void m_reset()
 {
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<i;j++)
            m[i][j]=0;
        m[i][i]=1.0;
        for(int j=i+1;j<N;j++)
            m[i][j]=rand()%1000+1;
    }
    for(int k=0;k<N;k++)
        for(int i=k+1;i<N;i++)
            for(int j=0;j<N;j++)
                m[i][j]+=m[k][j];
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
            cout<<m[i][j]<<" ";
        cout<<endl;
    }
}
typedef struct{
    int t_id;
}threadParam_t;

sem_t sem_leader;
sem_t sem_Divsion[NUM_THREADS-1];
sem_t sem_Elimination[NUM_THREADS-1];

void *threadFunc(void *param)
{
    threadParam_t *p=(threadParam_t*)param;
    int t_id=p->t_id;

    for(int k=0;k<N;k++)
    {
        if(t_id==0)
        {
            for(int j=k+1;j<N;j++)
            {
                m[k][j]=m[k][j]/m[k][k];
            }
             m[k][k]=1.0;
        }
        else
        {
            sem_wait(&sem_Divsion[t_id-1]);
        }
        if(t_id==0)
        {
            for(int i=0;i<NUM_THREADS-1;i++)
            {
                sem_post(&sem_Divsion[i]);
            }
        }
        for(int i=k+1;i<N;i++)
        {
            for(int j=k+1+t_id;j<N;j+=NUM_THREADS)
            {
                m[i][j]=m[i][j]-m[i][k]*m[k][j];
            }
            if(t_id==0)
            {
                for(int i=0;i<NUM_THREADS-1;i++)
                {
                    sem_wait(&sem_leader);
                }
                for(int i=0;i<NUM_THREADS-1;i++)
                {
                    sem_post(&sem_Elimination[i]);
                }
            }
             else
            {
                sem_post(&sem_leader);
                sem_wait(&sem_Elimination[t_id-1]);
            }
            m[i][k]=0.0;
        }


    }
    pthread_exit(NULL);
}
int main()
{
	m_reset();

        struct  timeval   tv_begin,tv_end;
        unsigned  long s_pthread_time;

        gettimeofday(&tv_begin,NULL);
	      sem_init(&sem_leader,0, 0);
        for(int i=0;i<NUM_THREADS-1;i++)
        {
            sem_init(&sem_Divsion[i],0,0);
            sem_init(&sem_Elimination[i],0,0);
        }

        pthread_t handles[NUM_THREADS];
        threadParam_t param[NUM_THREADS];
        for(int i =0;i<NUM_THREADS;i++)
        {
            param[i].t_id=i;
            pthread_create(&handles[i],NULL,threadFunc,(void*)&param[i]);
        }

        for(int i=0;i<NUM_THREADS;i++)
        {
            pthread_join(handles[i],NULL);
        }
        sem_destroy(&sem_leader);
        for(int i=0;i<NUM_THREADS-1;i++)
        {
            sem_destroy(&sem_Divsion[i]);
            sem_destroy(&sem_Elimination[i]);
        }



        gettimeofday(&tv_end,NULL);
        s_pthread_time=1000000 * (tv_end.tv_sec-tv_begin.tv_sec)+ tv_end.tv_usec-tv_begin.tv_usec;
        cout<<"s_pthread_time:"<<s_pthread_time<<endl;
        for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
            cout<<m[i][j]<<" ";
        cout<<endl;
    }

}
