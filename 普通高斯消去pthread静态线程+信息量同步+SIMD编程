#include <iostream>
#include<sys/time.h>
#include<arm_neon.h>
#include<pthread.h>
#include <semaphore.h>
using namespace std;
#define NUM_THREADS 7
const int N=4000;
float m[N][N];
void m_reset()
 {
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<i;j++)
            m[i][j]=0;
        m[i][i]=1.0;
        for(int j=i+1;j<N;j++)
            m[i][j]=rand()%1000+1;
    }
    for(int k=0;k<N;k++)
        for(int i=k+1;i<N;i++)
            for(int j=0;j<N;j++)
                m[i][j]+=m[k][j];
}
typedef struct{
    int t_id;
}threadParam_t;

sem_t sem_main;
sem_t sem_workerstart[NUM_THREADS];
sem_t sem_workerend[NUM_THREADS];


void *threadFunc(void *parm)
{
    threadParam_t *p=(threadParam_t*)parm;
    int t_id=p->t_id;
    int j;
    for(int k=0;k<N;++k)
    {
        sem_wait(&sem_workerstart[t_id]);
        for(int i=k+1+t_id;i<N;i+=NUM_THREADS)
        {
            float32x4_t vaik=vmovq_n_f32(m[i][k]);
                        for(j=k+1;j+4<N;j+=4)
                        {
                                float32x4_t vakj=vld1q_f32(&m[k][j]);
                                float32x4_t vaij=vld1q_f32(&m[i][j]);
                                float32x4_t vx=vmulq_f32(vakj,vaik);
                                vaij=vsubq_f32(vaij,vx);
                                vst1q_f32(&m[i][j],vaij);
			}
                        for(;j<N;j++)
                        {
                                m[i][j]=m[i][j]-m[k][j]*m[i][k];
                        }
                        m[i][k]=0;

        }
        sem_post(&sem_main);
        sem_wait(&sem_workerend[t_id]);
    }
    pthread_exit(NULL);
}
int main()
{
	m_reset();

        struct  timeval   tv_begin,tv_end;
        unsigned  long static_simd_pthread_time;

        gettimeofday(&tv_begin,NULL);

        sem_init(&sem_main,0,0);
        for(int i=0;i<NUM_THREADS;i++)
        {
            sem_init(&sem_workerstart[i],0,0);
            sem_init(&sem_workerend[i],0,0);
        }

        pthread_t handles[NUM_THREADS];
        threadParam_t param[NUM_THREADS];
        for(int i =0;i<NUM_THREADS;i++)
        {
            param[i].t_id=i;
            pthread_create(&handles[i],NULL,threadFunc,(void*)&param[i]);
        }
        int j;
    for(int k=0;k<N;k++)
    {
         float32x4_t vt=vmovq_n_f32(m[k][k]);
         for( j=k+1;j+4<N;j+=4)
        {
                float32x4_t va=vld1q_f32(&m[k][j]);
                va=vdivq_f32(va,vt);
                vst1q_f32(&m[k][j],va);
        }
        for(;j<N;j++)
        {
            m[k][j]=m[k][j]/m[k][k];
        }
        m[k][k]=1.0;


          for(int i=0;i<NUM_THREADS;i++)
          {
              sem_post(&sem_workerstart[i]);
          }
        for(int i=0;i<NUM_THREADS;i++)
          {
              sem_wait(&sem_main);
          }
           for(int i=0;i<NUM_THREADS;i++)
          {
              sem_post(&sem_workerend[i]);
          }

    }
    for(int i=0;i<NUM_THREADS;i++)
    {
        pthread_join(handles[i],NULL);
    }
        sem_destroy(&sem_main);
        for(int i=0;i<NUM_THREADS;i++)
        {
            sem_destroy(&sem_workerstart[i]);
            sem_destroy(&sem_workerend[i]);

        }

        gettimeofday(&tv_end,NULL);
        static_simd_pthread_time=1000000 * (tv_end.tv_sec-tv_begin.tv_sec)+ tv_end.tv_usec-tv_begin.tv_usec;
        cout<<"static_simd_pthread_time:"<<static_simd_pthread_time<<endl;
}
